"""문제
숫자 카드는 정수 하나가 적혀져 있는 카드이다. 상근이는 숫자 카드 N개를 가지고 있다. 정수 M개가 주어졌을 때, 이 수가 적혀있는 숫자 카드를 상근이가 가지고 있는지 아닌지를 구하는 프로그램을 작성하시오.

입력
첫째 줄에 상근이가 가지고 있는 숫자 카드의 개수 N(1 ≤ N ≤ 500,000)이 주어진다. 둘째 줄에는 숫자 카드에 적혀있는 정수가 주어진다. 숫자 카드에 적혀있는 수는 -10,000,000보다 크거나 같고, 10,000,000보다 작거나 같다. 두 숫자 카드에 같은 수가 적혀있는 경우는 없다.

셋째 줄에는 M(1 ≤ M ≤ 500,000)이 주어진다. 넷째 줄에는 상근이가 가지고 있는 숫자 카드인지 아닌지를 구해야 할 M개의 정수가 주어지며, 이 수는 공백으로 구분되어져 있다. 이 수도 -10,000,000보다 크거나 같고, 10,000,000보다 작거나 같다

출력
첫째 줄에 입력으로 주어진 M개의 수에 대해서, 각 수가 적힌 숫자 카드를 상근이가 가지고 있으면 1을, 아니면 0을 공백으로 구분해 출력한다.
https://www.acmicpc.net/problem/10815

예제입력
5
6 3 2 10 -10
8
10 9 -5 2 3 4 5 -10

예제 출력
1 0 0 1 1 0 0 1
"""

n = int(input())
nl = list(map(int, input().split()))
m = int(input())
ml = list(map(int, input().split()))
# 결과 저장
rl = []

nl.sort()

# l:list, s:start, e:end, v:value
def searchN(l, s, e, v):
    
    # start 와 end 가 같아지거나 반전되면 찾고자 하는 값이 없다
    if e >= s:
        # m:middle
        m = (e + s) // 2
         
        # 찾는 수가 가운데 있으면 럭키~
        if l[m] == v:
            return m
        elif l[m] > v:
            # 가운데 숫자보다 찾는 수가 작은경우 왼쪽 절반을 찾는다
            return searchN(l, s, m - 1, v)
        else:
            # 찾는 수가 가운데 숫자보다 큰 경우 오른쪽 절반을 찾는다
            return searchN(l, m + 1, e, v) 
    else:
        # 찾는 값이 없다
        return -1

for i in ml:
    if searchN(nl, 0, len(nl)-1, i) == -1:
        rl.append(0)
    else:
        rl.append(1)

print(*rl)